#!/usr/bin/python3
# -*- mode: python3; coding: utf-8 -*-
# Copyright Â© 2019 Zing Lau (zinglau2015@gmail.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see
# <http://www.gnu.org/licenses/>.
#

from __future__ import (division, absolute_import, print_function,
                        unicode_literals)

import configparser
import argparse
import logging
import logging.handlers

import dbus, dbus.exceptions, dbus.mainloop.glib
from gi.repository import GLib

from settings import *

version = "1.0RC1"

logger = logging.getLogger()
syslogger = None

helpers = {
    'authy': ('authy_helper', 'AuthyHelper'),
    'tg': ('tg_helper', 'TgHelper'),
}


def initlogger(debug, level=logging.WARNING):
    global syslogger
    syslogger = logging.handlers.SysLogHandler(facility=logging.handlers.SysLogHandler.LOG_DAEMON, address="/dev/log")
    syslogger.setFormatter(logging.Formatter('Mandos-helper [%(process)d]: %(levelname)s: %(message)s'))
    logger.addHandler(syslogger)

    if debug:
        console = logging.StreamHandler()
        console.setFormatter(logging.Formatter('%(asctime)s %(name)s'
                                               ' [%(process)d]: [%(threadName)s]: '
                                               ' %(levelname)s:'
                                               ' %(message)s')
                             )
        logger.addHandler(console)
    logger.setLevel(level)


class MandosHelper(object):

    def __init__(self, loop, bus, busname, helper):
        self._loop = loop
        self._bus = bus
        self._busname = busname
        self._proxy = self._bus.get_object(self._busname, "/", follow_name_owner_changes=True)
        self._helper = helper
        self._bus.add_signal_receiver(self._receiver,
                                      dbus_interface=self._busname + '.Client',
                                      signal_name=None,
                                      message_keyword='message',
                                      byte_arrays=True
                                      )

    def _receiver(self, *args, **kwargs):
        signal = kwargs['message'].get_member()
        path = kwargs['message'].get_path()
        logger.debug("Received signal: {} on {}".format(signal, path))
        for arg in args:
            logger.debug('			' + str(arg))
        if signal in self._helper.handledSignals:
            try:
                all_clients = self._bus.get_object(self._busname, '/', follow_name_owner_changes=True
                                               ).GetAllClientsWithProperties()
                proxy = self._bus.get_object(self._busname, path, follow_name_owner_changes=True)
                self._helper.process(signal, path, args, all_clients[path], proxy)
            except dbus.exceptions.DBusException as e:
                logger.error(e)
            except Exception as e:
                raise


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-v", "--version", action="version",
                        version="%(prog)s {}".format(version),
                        help="show version number and exit")
    parser.add_argument("--debug", action="store_true",
                        help="Debug mode; run in foreground and log to terminal", default=None)
    parser.add_argument("--debuglevel", metavar="LEVEL",
                        help="Debug level for stdout output", default='')
    parser.add_argument("--helper",
                        default="authy", metavar="HELPER",
                        help="helper used for handling Mandos server dbus messages, currently supported:"
                             " authy (Twillo Authy one-touch), tg (Telegram bot). Default to authy.")
    options = parser.parse_args()
    if options.debug:
        initlogger(options.debug, logging.DEBUG)
    else:
        if not options.debuglevel:
            initlogger(options.debug, logging.INFO)
        else:
            level = getattr(logging, options.debuglevel.upper())
            initlogger(options.debug, level)
    global helpers
    dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
    bus = dbus.SystemBus()
    loop = GLib.MainLoop()
    busname = 'se.recompile.Mandos'
    if options.helper in helpers:
        helper_module_name, helper_class_name = helpers[options.helper]
        helper_module = __import__(helper_module_name)
        helper = getattr(helper_module, helper_class_name)(bus, busname)
        MandosHelper(loop, bus, busname, helper)
        try:
            loop.run()
        except KeyboardInterrupt:
            helper.stop()
            loop.quit()
        except Exception as e:
            logger.error(str(e))
            helper.stop()
            loop.quit()
            raise
    else:
        logger.error('Helper type {} is not recognized'.format(options.helper))


if __name__ == '__main__':
    main()
